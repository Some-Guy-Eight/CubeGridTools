using UnityEngine;
using System;

namespace SlimeGame {
    [Flags]
    public enum Directions {
        None            = 0,
        Right           = 1,
        Left            = 2,
        Up              = 4,
        Down            = 8,
        Fwd             = 16,
        Back            = 32,

        RightUp         = Right | Up,
        RightDown       = Right | Down,
        RightFwd        = Right | Fwd,
        RightBack       = Right | Back,
        LeftUp          = Left  | Up,
        LeftDown        = Left  | Down,
        LeftFwd         = Left  | Fwd,
        LeftBack        = Left  | Back,
        UpFwd           = Up    | Fwd,
        UpBack          = Up    | Back,
        DownFwd         = Down  | Fwd,
        DownBack        = Down  | Back,

        RightUpFwd      = Right | Up    | Fwd,
        RightUpBack     = Right | Up    | Back,
        RightDownFwd    = Right | Down  | Fwd,
        RightDownBack   = Right | Down  | Back,
        LeftUpFwd       = Left  | Up    | Fwd,
        LeftUpBack      = Left  | Up    | Back,
        LeftDownFwd     = Left  | Down  | Fwd,
        LeftDownBack    = Left  | Down  | Back,     
    }
    public static class DirectionsExtensions {
        public static bool IsNone(this Directions a) {
            return a == 0;
        }
        public static bool IsSingleFlag(this Directions a) {
            return a != 0 && (a & (a - 1)) == 0;
        }
        public static bool HasFlags(this Directions a,Directions b) {
            return (a & b) == b;
        }
        public static Directions ToggleFlags(this Directions a,Directions b) {
            return a ^= b;
        }
        public static Directions SetFlags(this Directions a,Directions b) {
            return a | b;
        }
        public static Directions UnsetFlags(this Directions a,Directions b) {
            return a & (~b);
        }
        public static Vector3Int ToVector(this Directions directions) {
            var vector = Vector3Int.zero;
            if(directions.HasFlags(Directions.Right)) {
                vector.x = 1;
            } else if(directions.HasFlags(Directions.Left)) {
                vector.x = -1;
            }
            if(directions.HasFlags(Directions.Up)) {
                vector.y = 1;
            } else if(directions.HasFlags(Directions.Down)) {
                vector.y = -1;
            }
            if(directions.HasFlags(Directions.Fwd)) {
                vector.z = 1;
            } else if(directions.HasFlags(Directions.Back)) {
                vector.z = -1;
            }
            return vector;
        }
        public static Directions Invert(this Directions directions) {
            if(directions.HasFlags(Directions.Right) || directions.HasFlags(Directions.Left)) {
                directions ^= Directions.Right;
                directions ^= Directions.Left;
            }
            if(directions.HasFlags(Directions.Up) || directions.HasFlags(Directions.Down)) {
                directions ^= Directions.Up;
                directions ^= Directions.Down;
            }
            if(directions.HasFlags(Directions.Fwd) || directions.HasFlags(Directions.Back)) {
                directions ^= Directions.Fwd;
                directions ^= Directions.Back;
            }

            return directions;
        }
        public static Direction ToDirection(this Directions directions) {
            switch(directions) {
                case Directions.Right               : return Direction.Right                ;
                case Directions.Left                : return Direction.Left                 ;
                case Directions.Up                  : return Direction.Up                   ;
                case Directions.Down                : return Direction.Down                 ;
                case Directions.Fwd                 : return Direction.Fwd                  ;
                case Directions.Back                : return Direction.Back                 ;
                case Directions.RightUp             : return Direction.RightUp              ;
                case Directions.RightDown           : return Direction.RightDown            ;
                case Directions.RightFwd            : return Direction.RightFwd             ;
                case Directions.RightBack           : return Direction.RightBack            ;
                case Directions.LeftUp              : return Direction.LeftUp               ;
                case Directions.LeftDown            : return Direction.LeftDown             ;
                case Directions.LeftFwd             : return Direction.LeftFwd              ;
                case Directions.LeftBack            : return Direction.LeftBack             ;
                case Directions.UpFwd               : return Direction.UpFwd                ;
                case Directions.UpBack              : return Direction.UpBack               ;
                case Directions.DownFwd             : return Direction.DownFwd              ;
                case Directions.DownBack            : return Direction.DownBack             ;
                case Directions.RightUpFwd          : return Direction.RightUpFwd           ;
                case Directions.RightUpBack         : return Direction.RightUpBack          ;
                case Directions.RightDownFwd        : return Direction.RightDownFwd         ;
                case Directions.RightDownBack       : return Direction.RightDownBack        ;
                case Directions.LeftUpFwd           : return Direction.LeftUpFwd            ;    
                case Directions.LeftUpBack          : return Direction.LeftUpBack           ;
                case Directions.LeftDownFwd         : return Direction.LeftDownFwd          ;
                case Directions.LeftDownBack        : return Direction.LeftDownBack         ;
                default: return Direction.None;
            }
        }
        public static DirectionTypes GetDirectionTypes(this Directions directions) {
            switch(directions) {
                case Directions.Right:
                case Directions.Left:
                case Directions.Up:
                case Directions.Down:
                case Directions.Fwd:
                case Directions.Back:           return DirectionTypes.Face;

                case Directions.RightUp:
                case Directions.RightDown:
                case Directions.RightFwd:
                case Directions.RightBack:
                case Directions.LeftUp:
                case Directions.LeftDown:
                case Directions.LeftFwd:
                case Directions.LeftBack:
                case Directions.UpFwd:
                case Directions.UpBack:
                case Directions.DownFwd:
                case Directions.DownBack:       return DirectionTypes.Edge;

                case Directions.RightUpFwd:
                case Directions.RightUpBack:
                case Directions.RightDownFwd:
                case Directions.RightDownBack:
                case Directions.LeftUpFwd:
                case Directions.LeftUpBack:
                case Directions.LeftDownFwd:
                case Directions.LeftDownBack:   return DirectionTypes.Corner;

                default:                        return DirectionTypes.None;
            }
        }
    }
}
