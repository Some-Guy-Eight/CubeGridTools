using UnityEngine;

namespace SlimeGame {
    public struct RelativeVectors {

        public Vector3 right;
        public Vector3 up;
        public Vector3 fwd;

        public static implicit operator RelativeVectors(RelativeVectorsInt relativeVectorsInt) {
            return new RelativeVectors {
                right   = relativeVectorsInt.right,
                up      = relativeVectorsInt.up,
                fwd     = relativeVectorsInt.fwd
            };
        }

        #region relative vectors
        public static RelativeVectors Default               => RelativeVectorsInt._100000_001000_000010 ; /// Fwd_ZY_XY
        public static RelativeVectors Zero                  => RelativeVectorsInt._000000_000000_000000;
        // Right_ZY_XZ_XY face
        public static RelativeVectors Right_ZY_XY           => RelativeVectorsInt._000001_001000_100000 ; /// Default XY & XZ
        public static RelativeVectors Right_XZ              => RelativeVectorsInt._001000_000010_100000 ; /// Default XZ
        // left face
        public static RelativeVectors Left_ZY_XY            => RelativeVectorsInt._000010_001000_010000 ; /// Default XY & XZ
        public static RelativeVectors Left_XZ               => RelativeVectorsInt._000100_000010_010000 ; /// Default XZ
        // up face                                                                         
        public static RelativeVectors Up_ZYPositive         => RelativeVectorsInt._000001_010000_001000 ; /// Default ZY
        public static RelativeVectors Up_ZYNegative         => RelativeVectorsInt._000010_100000_001000 ;    
        public static RelativeVectors Up_XZ                 => RelativeVectorsInt._010000_000010_001000 ; /// Default XZ
        public static RelativeVectors Up_XYPositive         => RelativeVectorsInt._100000_000001_001000 ; /// Default XY
        public static RelativeVectors Up_XYNegative         => RelativeVectorsInt._010000_000010_001000 ;
        // down face
        public static RelativeVectors Down_ZYPositive       => RelativeVectorsInt._000001_100000_000100 ; /// Default ZY
        public static RelativeVectors Down_ZYNegative       => RelativeVectorsInt._000010_010000_000100 ;
        public static RelativeVectors Down_XZ               => RelativeVectorsInt._100000_000010_000100 ; /// Default XZ
        public static RelativeVectors Down_XYPositive       => RelativeVectorsInt._100000_000010_000100 ; /// Default XY
        public static RelativeVectors Down_XYNegative       => RelativeVectorsInt._010000_000001_000100 ;      
        // fwd face
        public static RelativeVectors Fwd_ZY_XY             => RelativeVectorsInt._100000_001000_000010 ; /// Default ZY & XY
        public static RelativeVectors Fwd_XZPositive        => RelativeVectorsInt._010000_000100_000010 ; /// Default XZ
        public static RelativeVectors Fwd_XZNegative        => RelativeVectorsInt._100000_001000_000010 ;
        // back face
        public static RelativeVectors Back_ZY_XY            => RelativeVectorsInt._010000_001000_000001 ; /// Default ZY & XY
        public static RelativeVectors Back_XZPositive       => RelativeVectorsInt._010000_001000_000001 ; /// Default XZ
        public static RelativeVectors Back_XZNegative       => RelativeVectorsInt._100000_000100_000001 ;
        // ZY & XY edge ( including: XZ UB & DF )
        public static RelativeVectors RightUp_ZY_XY         => RelativeVectorsInt._000001_011000_101000 ;
        public static RelativeVectors RightDown_ZY_XY       => RelativeVectorsInt._000001_101000_100100 ; 
        public static RelativeVectors RightFwd_ZY_XY        => RelativeVectorsInt._100001_001000_100010 ; 
        public static RelativeVectors RightBack_ZY_XY       => RelativeVectorsInt._010001_001000_100001 ;
        public static RelativeVectors LeftUp_ZY_XY          => RelativeVectorsInt._000010_101000_011000 ;
        public static RelativeVectors LeftDown_ZY_XY        => RelativeVectorsInt._000010_011000_010100 ;
        public static RelativeVectors LeftFwd_ZY_XY         => RelativeVectorsInt._100010_001000_010010 ;
        public static RelativeVectors LeftBack_ZY_XY        => RelativeVectorsInt._010010_001000_010001 ;
        public static RelativeVectors UpFwd_ZY_XY           => RelativeVectorsInt._100000_001001_001010 ; 
        public static RelativeVectors UpBack_ZY_XZ_XY       => RelativeVectorsInt._010000_001010_001001 ;
        public static RelativeVectors DownFwd_ZY_XZ_XY      => RelativeVectorsInt._100000_001010_000110 ;
        public static RelativeVectors DownBack_ZY_XY        => RelativeVectorsInt._010000_001001_000101 ;
        // ZY & XY corner
        public static RelativeVectors RightUpFwd_ZY_XY      => RelativeVectorsInt._100001_011001_101010 ;
        public static RelativeVectors RightUpBack_ZY_XY     => RelativeVectorsInt._100001_011010_101001 ; 
        public static RelativeVectors RightDownFwd_ZY_XY    => RelativeVectorsInt._010001_101010_100110 ; 
        public static RelativeVectors RightDownBack_ZY_XY   => RelativeVectorsInt._010001_101001_100101 ; 
        public static RelativeVectors LeftUpFwd_ZY_XY       => RelativeVectorsInt._100010_101001_011010 ; 
        public static RelativeVectors LeftUpBack_ZY_XY      => RelativeVectorsInt._010010_101010_011001 ; 
        public static RelativeVectors LeftDownFwd_ZY_XY     => RelativeVectorsInt._100010_011010_010110 ; 
        public static RelativeVectors LeftDownBack_ZY_XY    => RelativeVectorsInt._010010_011001_010101 ;
        // XZ edge ( except: XZ UB & DF => same as XZ & XY edge )
        public static RelativeVectors RightUp_XZ            => RelativeVectorsInt._011000_000010_101000 ;
        public static RelativeVectors RightDown_XZ          => RelativeVectorsInt._101000_000010_100100 ;
        public static RelativeVectors RightFwd_XZ           => RelativeVectorsInt._001000_010010_100010 ;
        public static RelativeVectors RightBack_XZ          => RelativeVectorsInt._001000_100010_100001 ;
        public static RelativeVectors LeftUp_XZ             => RelativeVectorsInt._010100_000010_011000 ; 
        public static RelativeVectors LeftDown_XZ           => RelativeVectorsInt._100100_000010_010100 ;
        public static RelativeVectors LeftFwd_XZ            => RelativeVectorsInt._000100_100010_010010 ;
        public static RelativeVectors LeftBack_XZ           => RelativeVectorsInt._000100_010010_010001 ;
        public static RelativeVectors UpFwd_XZ              => RelativeVectorsInt._010000_000110_001010 ;
        public static RelativeVectors DownBack_XZ           => RelativeVectorsInt._100000_000110_000101 ;
        // XZ corner                                                                  
        public static RelativeVectors RightUpFwd_XZ         => RelativeVectorsInt._011000_010110_101010 ;
        public static RelativeVectors RightUpBack_XZ        => RelativeVectorsInt._011000_101010_101001 ;
        public static RelativeVectors RightDownFwd_XZ       => RelativeVectorsInt._101000_011010_100110 ;
        public static RelativeVectors RightDownBack_XZ      => RelativeVectorsInt._101000_100110_100101 ;
        public static RelativeVectors LeftUpFwd_XZ          => RelativeVectorsInt._010100_100110_011010 ;
        public static RelativeVectors LeftUpBack_XZ         => RelativeVectorsInt._010100_011010_011001 ;
        public static RelativeVectors LeftDownFwd_XZ        => RelativeVectorsInt._100100_101010_010110 ;
        public static RelativeVectors LeftDownBack_XZ       => RelativeVectorsInt._100100_010110_010101 ;
        #endregion

        public static RelativeVectors FromDirection(Direction direction,bool normalize) {
            RelativeVectors relativeVectors = RelativeVectorsInt.FromDirection(direction);
            if(normalize) {
                return relativeVectors.Normalize();
            }
            return relativeVectors;
        }
        public static RelativeVectors FromDirections(Directions directions,bool normalize) {
            RelativeVectors relativeVectors = RelativeVectorsInt.FromDirections(directions);
            if(normalize) {
                return relativeVectors.Normalize();
            }
            return relativeVectors;
        }
        public static RelativeVectors FromDirectionAndPlane(Direction direction,bool normalize,Planes planes = Planes.XY) {
            RelativeVectors relativeVectors = RelativeVectorsInt.FromDirectionAndPlane(direction,planes);
            if(normalize) {
                return relativeVectors.Normalize();
            }
            return relativeVectors;
        }
        /// <summary>
        /// oriented from Z axis ( Planes.XY ) => X axis ( Planes.ZY )
        /// </summary>
        public static RelativeVectors FromDirectionZYPlane(Direction direction,bool normalize,bool hasRight = true) {
            RelativeVectors relativeVectors =  RelativeVectorsInt.FromDirectionZYPlane(direction,hasRight);
            if(normalize) {
                return relativeVectors.Normalize();
            }
            return relativeVectors;
        }
        /// <summary>
        /// oriented from Z axis ( Planes.XY ) => Y axis ( Planes.XZ )
        /// </summary>
        public static RelativeVectors FromDirectionXZPlane(Direction direction,bool normalize,bool hasUp = true) {
            RelativeVectors relativeVectors =  RelativeVectorsInt.FromDirectionXZPlane(direction,hasUp);
            if(normalize) {
                return relativeVectors.Normalize();
            }
            return relativeVectors;
        }
        /// <summary>
        /// default orientation => oriented on Z axis ( Planes.XY )
        /// </summary>
        public static RelativeVectors FromDirectionXYPlane(Direction direction,bool normalize,bool hasForward = true) {
            RelativeVectors relativeVectors =  RelativeVectorsInt.FromDirectionXYPlane(direction,hasForward);
            if(normalize) {
                return relativeVectors.Normalize();
            }
            return relativeVectors;
        }
    }
    public static class RelativeVectorsExtensions {
        public static RelativeVectors Normalize(this RelativeVectors relativeVectors) {
            relativeVectors.right = relativeVectors.right.normalized;
            relativeVectors.right = relativeVectors.up.normalized;
            relativeVectors.right = relativeVectors.fwd.normalized;
            return relativeVectors;
        }
    }
}
