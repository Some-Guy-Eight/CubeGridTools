using UnityEngine;
using System;

namespace SlimeGame {
    public static class PlanarRotationsExtensions {
        public static bool IsNone(this PlanarRotations a) {
            return a == 0;
        }
        public static bool IsSingleFlag(this PlanarRotations a) {
            return a != 0 && (a & (a - 1)) == 0;
        }
        public static bool HasFlags(this PlanarRotations a,PlanarRotations b) {
            return (a & b) == b;
        }
        public static PlanarRotations ToggleFlags(this PlanarRotations a,PlanarRotations b) {
            return a ^= b;
        }
        public static PlanarRotations SetFlags(this PlanarRotations a,PlanarRotations b) {
            return a | b;
        }
        public static PlanarRotations UnsetFlags(this PlanarRotations a,PlanarRotations b) {
            return a & (~b);
        }
        public static PlanarRotations OnlyPlanes(this PlanarRotations a) {
            return a & (~PlanarRotations.OnlyPlanesMask);
        }
        public static Directions PolarDirections(this PlanarRotations planes,out Directions positive,out Directions negative) {
            if(planes.HasFlags(PlanarRotations.ZY)) {
                positive = Directions.Right;
                negative = Directions.Left;
                return Directions.Right | Directions.Left;
            } else if(planes.HasFlags(PlanarRotations.XZ)) {
                positive = Directions.Up;
                negative = Directions.Down;
                return Directions.Up | Directions.Down;
            } else if(planes.HasFlags(PlanarRotations.XY)) {
                positive = Directions.Fwd;
                negative = Directions.Back;
                return Directions.Fwd | Directions.Back;
            }
            throw new Exception($"Failed to polar directions from Planes");
        }
        public static int AxisComponent(this PlanarRotations planes,Vector3Int vector) {
            if(planes.HasFlags(PlanarRotations.XZ) || planes.HasFlags(PlanarRotations.ZY)) {
                return vector.x;
            } else if(planes.HasFlags(PlanarRotations.ZY)) {
                return vector.y;
            } else if(planes.HasFlags(PlanarRotations.XY)) {
                return vector.z;
            }
            throw new Exception($"Failed to polar directions from Planes");
        }
    }
}
